(function(A){if(typeof exports=="object"&&typeof module=="object"){A(require("../../lib/codemirror"))}else{if(typeof define=="function"&&define.amd){define(["../../lib/codemirror"],A)}else{A(CodeMirror)}}})(function(A){A.defineMode("haskell",function(J,Q){function K(S,T,U){T(U);return U(S,T)}var F=/[a-z_]/;var E=/[A-Z]/;var D=/\d/;var I=/[0-9A-Fa-f]/;var R=/[0-7]/;var B=/[a-z_A-Z0-9'\xa1-\uffff]/;var M=/[-!#$%&*+.\/<=>?@\\^|~:]/;var N=/[(),;[\]`{}]/;var C=/[ \t\v\f]/;function G(S,T){if(S.eatWhile(C)){return null}var U=S.next();if(N.test(U)){if(U=="{"&&S.eat("-")){var V="comment";if(S.eat("#")){V="meta"}return K(S,T,P(V,1))}return null}if(U=="'"){if(S.eat("\\")){S.next()}else{S.next()}if(S.eat("'")){return"string"}return"string error"}if(U=='"'){return K(S,T,L)}if(E.test(U)){S.eatWhile(B);if(S.eat(".")){return"qualifier"}return"variable-2"}if(F.test(U)){S.eatWhile(B);return"variable"}if(D.test(U)){if(U=="0"){if(S.eat(/[xX]/)){S.eatWhile(I);return"integer"}if(S.eat(/[oO]/)){S.eatWhile(R);return"number"}}S.eatWhile(D);var V="number";if(S.match(/^\.\d+/)){V="number"}if(S.eat(/[eE]/)){V="number";S.eat(/[-+]/);S.eatWhile(D)}return V}if(U=="."&&S.eat(".")){return"keyword"}if(M.test(U)){if(U=="-"&&S.eat(/-/)){S.eatWhile(/-/);if(!S.eat(M)){S.skipToEnd();return"comment"}}var V="variable";if(U==":"){V="variable-2"}S.eatWhile(M);return V}return"error"}function P(S,T){if(T==0){return G}return function(U,V){var X=T;while(!U.eol()){var W=U.next();if(W=="{"&&U.eat("-")){++X}else{if(W=="-"&&U.eat("}")){--X;if(X==0){V(G);return S}}}}V(P(S,X));return S}}function L(S,T){while(!S.eol()){var U=S.next();if(U=='"'){T(G);return"string"}if(U=="\\"){if(S.eol()||S.eat(C)){T(O);return"string"}if(S.eat("&")){}else{S.next()}}}T(G);return"string error"}function O(S,T){if(S.eat("\\")){return K(S,T,L)}S.next();T(G);return"error"}var H=(function(){var V={};function S(W){return function(){for(var X=0;X<arguments.length;X++){V[arguments[X]]=W}}}S("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_");S("keyword")("..",":","::","=","\\","<-","->","@","~","=>");S("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**");S("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True");S("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");var T=Q.overrideKeywords;if(T){for(var U in T){if(T.hasOwnProperty(U)){V[U]=T[U]}}}return V})();return{startState:function(){return{f:G}},copyState:function(S){return{f:S.f}},token:function(V,T){var U=T.f(V,function(W){T.f=W});var S=V.current();return H.hasOwnProperty(S)?H[S]:U},blockCommentStart:"{-",blockCommentEnd:"-}",lineComment:"--"}});A.defineMIME("text/x-haskell","haskell")});